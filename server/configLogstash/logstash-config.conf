input {
  file {
    path => "/tmp/logs_modem_files/*/*.log"
    start_position => "beginning"
  }
}

filter{
  grok{
    match=>{ "message" => "%{YEAR:year}[-]%{MONTHNUM:month}[-]%{MONTHDAY:day} %{HOUR:hour}:%{MINUTE:minute}:%{SECOND:second} \[%{LOGLEVEL:level}\]\t[-] %{GREEDYDATA:data}"}
  } 

  aggregate {
    task_id => "%{path}"
    code => "
      map['global_count'] ||=0
      map['start_count'] ||= 0
      map['cond'] ||=''
      map['event'] ||= 'no error'
      "
    map_action => 'create'
  }

  
  aggregate {
    task_id => "%{path}"
    code => "
      map['global_count'] +=1
      if event.get('data') == 'start ModemD 255'
        map['start_count'] +=1
      end
      if event.get('data') == 'start ModemD 255' and map['start_count'] ==2
        map['cond'] = 'error'
      end
      if event.get('data') == 'MODEM_DOWN detected' and event.get('level') == 'ERROR'
        if map['cond'] == 'error' and map['start_count'] == 2
          map['cond'] = 'schedule'
        end
      end
      if event.get('data') == 'MODEMD_RELEASE_MODEM Start to wait for 70' and event.get('level') == 'INFO'
        if map['cond'] == 'schedule' and map['start_count'] == 2
          map['event'] = 'error pattern 3'
        end
      end

      event.set('start_count', map['start_count'])
      event.set('global_count', map['global_count'])
      event.set('cond', map['cond'])
      event.set('event', map['event'])
      "
    map_action => 'update'
    push_map_as_event_on_timeout => true
    inactivity_timeout  => 10
    timeout_tags => ['_aggregatetimeout']
    timeout_task_id_field => "path"
    timeout_code => "event.set('res', event.get('event'))"
  }

}

output {   
    stdout {codec => rubydebug}

    if  [global_count] == 1{
      file{
        path => "/tmp/logs_modem_files/status.log"
        codec => line {format => "%{path} - In progress ..."}
      }
    }

    file {
      path => "/tmp/logs_modem_files/mydebug.log"
      codec => line { format => "path : %{path} ; data : %{data} ; count : %{start_count}; cond : %{cond}; event : %{event}"}
      #codec => line { format => "data : %{data} ; count : %{start_count}; cond : %{cond}; event : %{event}"}
    }
  if [res]{
    file {
      path => "/tmp/logs_modem_files/result.log"
      codec => line { format => "%{path} - %{res}"}
    }

    file{
      path => "/tmp/logs_modem_files/status.log"
      codec => line {format => "%{path} - Done ..."}
    }
  }

}

